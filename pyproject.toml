[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-scaffold"
dynamic = ["version"]
description = "AI-powered project scaffolding tool"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Soheil Shahi", email = "soheilshahi42@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "questionary>=2.0.0",
    "colorama>=0.4.6",
    "pyyaml>=6.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.11.1",
    "pytest-timeout>=2.1.0",
    
    # Code coverage
    "coverage[toml]>=7.3.0",
    
    # Mocking
    "mock>=5.1.0",
    
    # Code quality
    "flake8>=6.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    
    # Development tools
    "ipython>=8.14.0",
    "ipdb>=0.13.13",
    
    # Type stubs
    "types-PyYAML",
    "types-setuptools",
    
    # Formatting
    "autopep8>=2.0.0",
]

[project.scripts]
claude-scaffold = "cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.black]
line-length = 100
target-version = ['py310']
skip-string-normalization = true

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-ra -q --strict-markers"

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]